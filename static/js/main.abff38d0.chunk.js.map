{"version":3,"sources":["components/Header.js","components/Form.js","components/Todo.js","components/Todone.js","components/TodoCount.js","components/TodoneCount.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","role","aria-label","React","Component","Form","state","task","important","dueDate","updateTask","event","console","log","target","value","setState","updateDueDate","setLowPriority","setHighPriority","addTodo","props","addTodoFunc","preventDefault","htmlFor","id","type","onChange","this","placeholder","onClick","name","selected","Todo","handleDelete","deleteTaskFunc","handleUpdate","completeTaskFunc","moment","format","aria-hidden","Todone","TodoCount","count","TodoneCount","App","todos","newTask","completed","axios","post","then","response","newTodo","data","copyOfTodos","slice","push","catch","err","deleteTask","delete","filteredTasks","filter","todo","taskID","completeTask","put","updatedTasks","map","get","todoTasks","todoneTasks","todone","length","key","complete","text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abff38d0.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"title\"> G.Y.S.T.List </h1>\n                <p>Either you've already got all your <span role=\"img\" aria-label=\"poo\">ðŸ’©</span>together, or you want to add your list of s*** to do &#x2193;</p>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nclass Form extends React.Component {\n    state = {\n        task: \"\",\n        important: false,\n        dueDate: \"2020-01-01\",\n    }\n\n    updateTask = (event) => {\n        console.log(event.target.value)\n        this.setState({\n            task: event.target.value\n        })\n    }\n\n    updateDueDate = (event) => {\n        this.setState({\n            dueDate: event.target.value\n        })\n    }\n\n    setLowPriority = (event) => {\n        this.setState({\n            important: false\n        })\n    }\n\n    setHighPriority = (event) => {\n        this.setState({\n            important: true\n        })\n    }\n\n    addTodo = (event) => {\n        console.log(this.state)\n\n        this.props.addTodoFunc(\n            this.state.task,\n            this.state.dueDate,\n            this.state.important\n        )\n\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-12 col-md-5\">\n                                <label htmlFor=\"Todo\">Todo</label><br></br>\n                                <input id=\"Todo\" type=\"text\" onChange={this.updateTask} value={this.state.task} placeholder=\"E.g. Take over the world\" /><br></br>\n                            </div>\n                            <div className=\"col-12 col-md-2\">\n                                <label htmlFor=\"Due by date\">Due by date</label><br></br>\n                                <input type=\"date\" onChange={this.updateDueDate} value={this.state.dueDate} /><br></br>\n                            </div>\n                            <div className=\"col-12 col-md-3\">\n                                <label htmlFor=\"Priority\">Priority</label><br></br>\n                                <label htmlFor=\"Low\"><input onClick={this.setLowPriority} id=\"Low\" type=\"radio\" name=\"Low-High\" value=\"Low\" selected /> Low</label>\n                                <label htmlFor=\"High\"><input onClick={this.setHighPriority} id=\"High\" type=\"radio\" name=\"Low-High\" value=\"High\" /> High</label>\n                            </div>\n                            <div className=\"col-12 col-md-1\">\n                                <button type=\"submit\" onClick={this.addTodo} >Add</button>\n                            </div>\n                        </div>\n                    </div>\n                    </form>\n            </div>\n\n        )\n    }\n}\n\nexport default Form;","import React from \"react\";\nimport moment from \"moment\";\nimport '../components/Todo.css'\n\nclass Todo extends React.Component {\n    handleDelete = () => {\n        this.props.deleteTaskFunc(this.props.id)\n    }\n    handleUpdate = () => {\n        this.props.completeTaskFunc(this.props.id)\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-6\">\n                    <p className=\"todo\">{this.props.task}</p>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    {this.props.important === true &&\n                        <p> <span role=\"img\" aria-label=\"flag\">ðŸš©</span></p>\n                    }\n                </div>\n                <div className=\"col-12 col-sm-3\">\n                    <p>{moment(this.props.dueDate).format(\"Do MMM YY\")}</p>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    <button type=\"submit\" onClick={this.handleDelete}><i className=\"fa fa-trash\"></i></button>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    <button type=\"submit\" onClick={this.handleUpdate}><i className=\"fa fa-check-square\" aria-hidden=\"true\"></i></button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Todo;","import React from \"react\";\nimport '../components/Todone.css'\n\nclass Todone extends React.Component {\n    handleDelete = () => {\n        this.props.deleteTaskFunc(this.props.id)\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-11\">\n                    <p className=\"todone\">{this.props.task}</p>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    <button type=\"submit\" onClick={this.handleDelete}><i className=\"fa fa-trash\"></i></button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Todone;","import React from \"react\";\n\nclass TodoCount extends React.Component {\n    render() {\n        return (\n            <h3> <span id=\"sub\">S*** I've got to get done: </span><span> {this.props.count} </span> </h3>\n        );\n    }\n}\n\nexport default TodoCount;","import React from \"react\";\n\nclass TodoneCount extends React.Component {\n    render() {\n        return (\n            <h3> <span id=\"sub\">S*** I got together: </span><span> {this.props.count} </span> </h3>\n        );\n    }\n}\n\nexport default TodoneCount;","import React from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport './components/Style.css'\nimport Header from \"./components/Header.js\"\nimport Form from \"./components/Form.js\"\nimport Todo from \"./components/Todo.js\"\nimport Todone from \"./components/Todone.js\"\nimport TodoCount from \"./components/TodoCount.js\"\nimport TodoneCount from \"./components/TodoneCount.js\"\n\nclass App extends React.Component {\n  state = {\n    todos: []\n  };\n  // add task - form\n  // delete task - todo and todone\n  // complete task - todo\n  // put line through todone?\n  // Split out CSS to components\n\n  componentDidMount() {\n    // Fetch the todos making a GET request\n    axios.get(\"https://qfsnx6z149.execute-api.eu-west-1.amazonaws.com/dev/todos\")\n      .then((response) => {\n        const todos = response.data.todos;\n        this.setState({\n          todos: todos\n        })\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  addTodo = (task, dueDate, important) => {\n    const newTask = {\n      task: task,\n      important: important,\n      completed: false,\n      dueDate: dueDate,\n    };\n\n      axios.post(\"https://qfsnx6z149.execute-api.eu-west-1.amazonaws.com/dev/todos\", newTask)\n      .then((response) => {\n        const newTodo = response.data;\n        const copyOfTodos = this.state.todos.slice();\n        copyOfTodos.push(newTodo);\n\n        this.setState({\n          todos: copyOfTodos\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n    });\n  }\n\n  deleteTask = (id) => {\n    axios.delete(`https://qfsnx6z149.execute-api.eu-west-1.amazonaws.com/dev/todos/${id}`)\n    .then(() => {\n      const filteredTasks = this.state.todos.filter(todo => {\n        if (todo.taskID === id) return false;\n        else return true;\n      });\n      this.setState({\n        todos: filteredTasks\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  };\n\n  // completeTask = (id) => {\n  //   const newList = this.state.tasks.map(task => {\n  //     if (task.id === id) {\n  //       const updatedTask = { ...task, complete: true }\n  //       return updatedTask\n  //     }\n  //     return task\n  //   })\n  //   this.setState({\n  //     tasks: newList\n  //   })\n  // }\n\n  completeTask = id => {\n    // Mark task (complete=true)\n    axios.put(`https://qfsnx6z149.execute-api.eu-west-1.amazonaws.com/dev/todos/${id}`, {\n      completed: true\n    })\n      .then(() => {\n        const updatedTasks= this.state.todos.map(todo => {\n          if (todo.taskID === id) {\n            todo.completed = true;\n          }\n          return todo;\n        });\n\n        this.setState({\n          todos: updatedTasks\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    const todoTasks = this.state.todos.filter(todo => {\n      return todo.completed === false\n    })\n    const todoneTasks = this.state.todos.filter(todone => {\n      return todone.completed === true\n    })\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <Form addTodoFunc={this.addTodo} />\n          <div className=\"row\">\n            <div className=\"col-12 col-md-7\">\n              <TodoCount count={todoTasks.length} />\n              {/* <h2>Todo's</h2> */}\n              {todoTasks.map(todo => {\n                return (\n                  <div className=\"row\">\n                    <div className=\"col-12\">\n                      <Todo\n                        deleteTaskFunc={this.deleteTask}\n                        completeTaskFunc={this.completeTask}\n                        key={todo.taskID}\n                        complete={todo.completed}\n                        task={todo.text}\n                        important={todo.important}\n                        dueDate={todo.dueDate}\n                        id={todo.taskID} />\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div className=\"col-12 col-md-5\">\n              <TodoneCount count={todoneTasks.length} />\n              {/* <h2>Todone's</h2> */}\n              {todoneTasks.map(todone => {\n                return (\n                  <div className=\"row\">\n                    <div className=\"col-12\">\n                      <Todone\n                        deleteTaskFunc={this.deleteTask}\n                        key={todone.taskID}\n                        complete={todone.completed}\n                        task={todone.text}\n                        important={todone.important}\n                        dueDate={todone.dueDate}\n                        id={todone.taskID} />\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}