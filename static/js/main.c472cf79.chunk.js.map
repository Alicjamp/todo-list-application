{"version":3,"sources":["components/Header.js","components/Form.js","components/Todo.js","components/Todone.js","components/TodoCount.js","components/TodoneCount.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","role","aria-label","React","Component","Form","state","task","important","dueDate","updateTask","event","console","log","target","value","setState","updateDueDate","setLowPriority","setHighPriority","addTodo","props","addTodoFunc","preventDefault","htmlFor","id","type","onChange","this","placeholder","onClick","name","selected","Todo","handleDelete","deleteTaskFunc","handleUpdate","completeTaskFunc","class","aria-hidden","Todone","TodoCount","count","TodoneCount","App","tasks","complete","uuid","newTask","copy","slice","push","deleteTask","filterTasks","filter","completeTask","newList","map","todoTasks","todo","todoneTasks","todone","length","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c472cf79.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1 className=\"title\"> G.Y.S.T.List </h1>\n                <p>Either you've already got all your <span role=\"img\" aria-label=\"poo\">ðŸ’©</span>together, or you want to add your list of s*** to do &#x2193;</p>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nclass Form extends React.Component {\n    state = {\n        task: \"\",\n        important: false,\n        dueDate: \"2020-01-01\",\n    }\n\n    updateTask = (event) => {\n        console.log(event.target.value)\n        this.setState({\n            task: event.target.value\n        })\n    }\n\n    updateDueDate = (event) => {\n        this.setState({\n            dueDate: event.target.value\n        })\n    }\n\n    setLowPriority = (event) => {\n        this.setState({\n            important: false\n        })\n    }\n\n    setHighPriority = (event) => {\n        this.setState({\n            important: true\n        })\n    }\n\n    addTodo = (event) => {\n        console.log(this.state)\n\n        this.props.addTodoFunc(\n            this.state.task,\n            this.state.dueDate,\n            this.state.important\n        )\n\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-12 col-md-5\">\n                                <label htmlFor=\"Todo\">Todo</label><br></br>\n                                <input id=\"Todo\" type=\"text\" onChange={this.updateTask} value={this.state.task} placeholder=\"E.g. Take over the world\" /><br></br>\n                            </div>\n                            <div className=\"col-12 col-md-2\">\n                                <label htmlFor=\"Due by date\">Due by date</label><br></br>\n                                <input type=\"date\" onChange={this.updateDueDate} value={this.state.dueDate} /><br></br>\n                            </div>\n                            <div className=\"col-12 col-md-3\">\n                                <label htmlFor=\"Priority\">Priority</label><br></br>\n                                <label htmlFor=\"Low\"><input onClick={this.setLowPriority} id=\"Low\" type=\"radio\" name=\"Low-High\" value=\"Low\" selected /> Low</label>\n                                <label htmlFor=\"High\"><input onClick={this.setHighPriority} id=\"High\" type=\"radio\" name=\"Low-High\" value=\"High\" /> High</label>\n                            </div>\n                            <div className=\"col-12 col-md-1\">\n                                <button type=\"submit\" onClick={this.addTodo} >Add</button>\n                            </div>\n                        </div>\n                    </div>\n                    </form>\n            </div>\n\n        )\n    }\n}\n\nexport default Form;","import React from \"react\";\nimport '../components/Todo.css'\n\nclass Todo extends React.Component {\n    handleDelete = () => {\n        this.props.deleteTaskFunc(this.props.id)\n    }\n    handleUpdate = () => {\n        this.props.completeTaskFunc(this.props.id)\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-6\">\n                    <p className=\"todo\">{this.props.task}</p>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    {this.props.important === true &&\n                        <p> <span role=\"img\" aria-label=\"flag\">ðŸš©</span></p>\n                    }\n                </div>\n                <div className=\"col-12 col-sm-3\">\n                    <p>{this.props.dueDate}</p>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    <button type=\"submit\" onClick={this.handleDelete}><i class=\"fa fa-trash\"></i></button>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    <button type=\"submit\" onClick={this.handleUpdate}><i class=\"fa fa-check-square\" aria-hidden=\"true\"></i></button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Todo;","import React from \"react\";\nimport '../components/Todone.css'\n\nclass Todone extends React.Component {\n    handleDelete = () => {\n        this.props.deleteTaskFunc(this.props.id)\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-11\">\n                    <p className=\"todone\">{this.props.task}</p>\n                </div>\n                <div className=\"col-12 col-sm-1\">\n                    <button type=\"submit\" onClick={this.handleDelete}><i class=\"fa fa-trash\"></i></button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Todone;","import React from \"react\";\n\nclass TodoCount extends React.Component {\n    render() {\n        return (\n            <h3> <span id=\"sub\">S*** I've got to get done: </span><span> {this.props.count} </span> </h3>\n        );\n    }\n}\n\nexport default TodoCount;","import React from \"react\";\n\nclass TodoneCount extends React.Component {\n    render() {\n        return (\n            <h3> <span id=\"sub\">S*** I got together: </span><span> {this.props.count} </span> </h3>\n        );\n    }\n}\n\nexport default TodoneCount;","import React from 'react';\nimport uuid from \"uuid/v4\";\nimport './App.css';\nimport './components/Style.css'\nimport Header from \"./components/Header.js\"\nimport Form from \"./components/Form.js\"\nimport Todo from \"./components/Todo.js\"\nimport Todone from \"./components/Todone.js\"\nimport TodoCount from \"./components/TodoCount.js\"\nimport TodoneCount from \"./components/TodoneCount.js\"\n\nclass App extends React.Component {\n  state = {\n    tasks: [\n      { task: \"Tech returners homework\", important: true, complete: false, dueDate: \"2019-12-02\", id: uuid() },\n      { task: \"Put up Xmas tree\", important: true, complete: false, dueDate: \"2019-12-30\", id: uuid() },\n      { task: \"Wrap presents\", important: true, complete: true, dueDate: \"2019-12-01\", id: uuid() },\n      { task: \"Clean the house\", important: false, complete: false, dueDate: \"2019-12-22\", id: uuid() },\n      { task: \"Food shopping\", important: true, complete: true, dueDate: \"2019-12-28\", id: uuid() },\n      { task: \"Work overtime\", important: true, complete: false, dueDate: \"2019-12-25\", id: uuid() },\n    ]\n  }\n  // add task - form\n  // delete task - todo and todone\n  // complete task - todo\n  // put line through todone?\n  // Split out CSS to components\n  // change colours to look less crappy\n\n  addTodo = (task, dueDate, important) => {\n    console.log(task, dueDate, important)\n    const newTask = {\n      task: task,\n      important: important,\n      complete: false,\n      dueDate: dueDate,\n      id: uuid()\n    }\n    const copy = this.state.tasks.slice();\n    copy.push(newTask)\n    console.log(copy)\n    this.setState({\n      tasks: copy\n    })\n  }\n\n  deleteTask = (id) => {\n    const filterTasks = this.state.tasks.filter(task => {\n      return task.id !== id\n    })\n    console.log(filterTasks)\n    this.setState({\n      tasks: filterTasks\n    })\n  }\n\n  completeTask = (id) => {\n    const newList = this.state.tasks.map(task => {\n      if (task.id === id) {\n        const updatedTask = { ...task, complete: true }\n        return updatedTask\n      }\n      return task\n    })\n    this.setState({\n      tasks: newList\n    })\n  }\n\n  render() {\n    const todoTasks = this.state.tasks.filter(todo => {\n      return todo.complete === false\n    })\n    const todoneTasks = this.state.tasks.filter(todone => {\n      return todone.complete === true\n    })\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <Form addTodoFunc={this.addTodo} />\n          <div className=\"row\">\n            <div className=\"col-12 col-md-7\">\n              <TodoCount count={todoTasks.length} />\n              {/* <h2>Todo's</h2> */}\n              {todoTasks.map(todo => {\n                return (\n                  <div className=\"row\">\n                    <div className=\"col-12\">\n                      <Todo\n                        deleteTaskFunc={this.deleteTask}\n                        completeTaskFunc={this.completeTask}\n                        key={todo.id}\n                        complete={todo.complete}\n                        task={todo.task}\n                        important={todo.important}\n                        dueDate={todo.dueDate}\n                        id={todo.id} />\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div className=\"col-12 col-md-5\">\n              <TodoneCount count={todoneTasks.length} />\n              {/* <h2>Todone's</h2> */}\n              {todoneTasks.map(todone => {\n                return (\n                  <div className=\"row\">\n                    <div className=\"col-12\">\n                      <Todone\n                        deleteTaskFunc={this.deleteTask}\n                        key={todone.id}\n                        complete={todone.complete}\n                        task={todone.task}\n                        important={todone.important}\n                        dueDate={todone.dueDate}\n                        id={todone.id} />\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}